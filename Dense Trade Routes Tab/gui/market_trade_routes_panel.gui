# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types market_panel
{
	type market_panel_trade_routes_content = flowcontainer {
		using = default_list_position
		direction = vertical

		flowcontainer = {
			using = default_list_position
			visible = "[Market.CanCreateTradeRoutesInMarket(GetPlayer.Self)]"
			direction = vertical
			margin = { 0 15 }

			possible_trade_routes = {}
		}

		flowcontainer = {
			direction = vertical
			parentanchor = hcenter
			visible = "[Not(IsDataModelEmpty(Market.AccessInactivePlayerRoutes))]"
			margin_top = 10
			margin_bottom = 10
			margin_left = 10
			margin_right = 10

			background = {
				using = entry_bg
			}
			textbox = {
				text = "INACTIVE_TRADE_ROUTES"
				autoresize = yes
				align = nobaseline
				margin_bottom = 5
			}
			flowcontainer = {
				direction = vertical
				datamodel = "[Market.AccessInactivePlayerRoutes]"

				item = {
					traded_good_trade_route = {
						blockoverride "first_flag_or_icon" {
							icon = {
								datacontext = "[TradeRoute.GetGoods]"
								texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
								size = { 55 55 }
								color = "[Goods.GetCategoryColor]"

								tooltipwidget = {
									FancyTooltip_Goods = {}
								}
								
								icon = {
									texture = "[Goods.GetTexture]"
									size = { 40 40 }
									parentanchor = center
								}
								icon = {
									size = { 25 25 }
									visible = "[Goods.HasGoodsShortage]"
									texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
									tooltip = "GOODS_SHORTAGE_TOOLTIP"
									parentanchor = bottom
								}
							}
						}
					}
				}
			}
		}
		flowcontainer = {
			direction = vertical
			parentanchor = hcenter
			visible = "[Not(IsDataModelEmpty(Market.AccessUnproductivePlayerRoutes))]"
			margin_top = 10
			margin_bottom = 10
			margin_left = 10
			margin_right = 10

			background = {
				using = entry_bg
			}

			textbox = {
                text = "UNPRODUCTIVE_TRADE_ROUTES"
                autoresize = yes
                align = nobaseline
                margin_bottom = 5
            }
            flowcontainer = {
                direction = vertical
                datamodel = "[Market.AccessUnproductivePlayerRoutes]"

                item = {
                    traded_good_trade_route = {
                    	blockoverride "first_flag_or_icon" {
							icon = {
								datacontext = "[TradeRoute.GetGoods]"
								texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
								size = { 55 55 }
								color = "[Goods.GetCategoryColor]"

								tooltipwidget = {
									FancyTooltip_Goods = {}
								}
								
								icon = {
									texture = "[Goods.GetTexture]"
									size = { 40 40 }
									parentanchor = center
								}
								icon = {
									size = { 25 25 }
									visible = "[Goods.HasGoodsShortage]"
									texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
									tooltip = "GOODS_SHORTAGE_TOOLTIP"
									parentanchor = bottom
								}
							}
						}
                    }
                }
            }
        }

		# Empty state, is a nested mess because the alternative of doing a [And(And(And(And)))] check is even less readable
		container = {
			using = default_list_position
			visible = "[IsDataModelEmpty(Market.AccessPlayerImportRoutes)]"
			
			container = {
				visible = "[IsDataModelEmpty(Market.AccessOtherExportRoutes)]"

				container = {
					visible = "[IsDataModelEmpty(Market.AccessPlayerExportRoutes)]"
					
					flowcontainer = {
						visible = "[IsDataModelEmpty(Market.AccessOtherImportRoutes)]"
						direction = vertical
						spacing = 40

						textbox = {
							margin_top = 40
							using = default_list_position
							text = "TRADE_ROUTE_EMPTY_STATE"
							autoresize = yes
							align = nobaseline
							using = fontsize_large
							using = empty_state_text_properties
						}

						divider_decorative = {}
					}
				}
			}
		}

		flowcontainer = {
			direction = vertical
			parentanchor = hcenter
			using = default_list_position
			margin_bottom = 10
			datamodel = "[Market.AccessAllGoodsWithTradeRoutes]"

			item = {
				traded_good = {
					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle( Concatenate( 'market_goods_', MarketGoods.GetIDString ) )]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString )))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString ))]"
					}	
				}
			}
		}
		
		widget = { size = { 10 15 }}
	}

	type traded_good = flowcontainer {
		datacontext = "[MarketGoods.GetGoods]"
		datacontext = "[MarketGoods.GetMarket]"
		direction = vertical
		parentanchor = hcenter
		margin_top = 0 # was 15
		flowcontainer = {
			maximumsize = { @panel_width 100 }
			parentanchor = left
			
			### Goods icon
			button_icon_round_big = {
				size = { 40 40 } # was { 80 80 }
				blockoverride "icon" {
					texture = "[Goods.GetTexture]"
				}

				onclick = "[InformationPanelBar.OpenGoodsPanel(AccessPlayer.AccessFirstMarket.Self, Goods.Self)]"
				onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"

				#TODO add IsBeingHighlighted code support for Goods icon when it is being hovered.
				#onmousehierarchyenter = "[AccessHighlightManager.HighlightGoods(Goods.Self)]"
				#onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

				tooltipwidget = {
					FancyTooltip_Goods = {}
				}
			}
			flowcontainer = {
				margin_left = -10
				direction = vertical
				### DROPDOWN / EXPAND
				section_header_button = {
					blockoverride "layout" {
						size = { 500 40 } # was { 450 40 }
					}
					using = market_price_tooltip_with_graph
					hbox = {
						ignoreinvisible = no
						spacing = 5
						margin_left = 25
						parentanchor = vcenter
						textbox = {
							size = { 115 50 }
							text = "@money![Goods.GetMarketPrice|0v] [Goods.GetCompareIconAgainstBasePrice( Goods.GetMarketPrice )] (#v [Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice)|%0=-]#!)"					
						}
						widget = {				
							size = { 200 50 }
							widget = {
								parentanchor = left
								size = { 100 50 } # was { 150 50 }
								tooltip = "TRADED_GOODS_IMPORTED_TOOLTIP"
								hbox = {
									alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(MarketGoods.GetImportAmount, '(CFixedPoint)0'))]"
									layoutpolicy_horizontal = expanding
									#visible = "[GreaterThan_int32(MarketGoods.GetNumImportTradeRoutes, '(int32)0')]"
									margin_left = 0 # was 10
									
									icon = {
										texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
										size = { 20 20 } # was { 35 35 }
									}
									textbox = {
										elide = right
										layoutpolicy_horizontal = expanding
										margin = { 10 0 }
										using = fontsize_large
										fontsize_min = 12
										text = "TRADED_GOODS_IMPORTED_AND_NUMBER_OF_IMPORT_ROUTES"
									}
								}
							}
							widget = {
								parentanchor = right
								size = { 100 50 } # was { 150 50 }
								tooltip = "TRADED_GOODS_EXPORTED_TOOLTIP"
								hbox = {
									alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(MarketGoods.GetExportAmount, '(CFixedPoint)0'))]"
									layoutpolicy_horizontal = expanding
									#visible = "[GreaterThan_int32(MarketGoods.GetNumExportTradeRoutes, '(int32)0')]"
									margin_left = 0 # was 10
									
									icon = {
										texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
										size = { 20 20 } # was { 35 35 }
									}
									textbox = {
										elide = right
										layoutpolicy_horizontal = expanding
										margin = { 10 0 }
										#visible = "[NotEqualTo_CFixedPoint(MarketGoods.GetExportAmount, '(CFixedPoint)0')]"
										using = fontsize_large
										fontsize_min = 12
										text = "TRADED_GOODS_EXPORTED_AND_NUMBER_OF_EXPORT_ROUTES"
									}
								}
							}
						}
						set_level_bar_market_tariffs = {
							margin_left = -5
						}
						icon = {
							tooltip = "There are trade routes for this good that are owned by you"
							size = { 30 30 }
							texture = "gfx/interface/icons/lens_toolbar_icons/trade_agreement.dds"
							visible = "[Not(IsDataModelEmpty(MarketGoods.AccessPlayerTradeRoutes))]"		
						}
					}
				}
			}
		}

        flowcontainer = {
            direction = vertical
            parentanchor = hcenter
            margin_bottom = 5
            margin_top = 5
            max_width = 540
            min_width = 540
            visible = "[And( Not(IsDataModelEmpty(MarketGoods.AccessPlayerTradeRoutes)), GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString )))]"

			background = {
				using = dropdown_background

				modify_texture = {
					texture = "gfx/interface/masks/fade_vertical_top.dds"
					blend_mode = alphamultiply
					alpha = 1
				}
			}

			textbox = {
				text = "TRADE_ROUTE_PLAYER"
				autoresize = yes
				align = left|nobaseline
				margin_left = 15
				margin_bottom = 5
			}

			datamodel = "[MarketGoods.AccessPlayerTradeRoutes]"
			item = {
            	traded_good_trade_route = {}
            }
        }

        divider_decorative = {
        	visible = "[And( Not(IsDataModelEmpty(MarketGoods.AccessOthersTradeRoutes)), GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString )))]"
        }

        flowcontainer = {
            direction = vertical
            parentanchor = hcenter
            margin_bottom = 5
            margin_top = 5
            max_width = 540
            min_width = 540
            visible = "[And( Not(IsDataModelEmpty(MarketGoods.AccessOthersTradeRoutes)), GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString )))]"

			background = {
				using = dropdown_background

				modify_texture = {
					texture = "gfx/interface/masks/fade_vertical_top.dds"
					blend_mode = alphamultiply
					alpha = 1
				}
			}

			textbox = {
				text = "OTHER_COUNTRIES_TRADE_ROUTES"
				autoresize = yes
				align = left|nobaseline
				margin_left = 15
				margin_bottom = 5
			}

			datamodel = "[MarketGoods.AccessOthersTradeRoutes]"
			item = {
               traded_good_trade_route = {}
            }
        }

        divider_decorative = {}
	}

	type traded_good_trade_route = widget {

		layoutpolicy_horizontal = expanding
		divider_clean = {
			size = { 510 1 }
		}

		size = { 510 60 }
		parentanchor = hcenter

		button_icon_cancel = {
			size = { 30 30 }
			parentanchor = right|vcenter
			onclick = "[Execute( TradeRoute.Cancel )]"
			visible = "[IsValid( TradeRoute.Cancel )]"
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 10 0 }
			spacing = 10
			margin_right = 35


			block "first_flag_or_icon" {
				small_flag = {
					datacontext = "[Market.GetOwner]"
				}
			}

			widget = {
				size = { 190 50 }

				button = {
					size = { 100% 40 }
					using = clean_button
					using = select_button_sound
					parentanchor = right|vcenter
					tooltip = "TRADE_ROUTE_TOOLTIP"
					onclick = "[InformationPanelBar.OpenMarketPanel( TradeRoute.GetOtherMarket(Market.Self) )]"
					onrightclick = "[RightClickMenuManager.ShowForTradeRoute(TradeRoute.AccessSelf)]"								

					onmousehierarchyenter = "[AccessHighlightManager.HighlightTradeRouteSupplyNetwork( TradeRoute.Self )]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					
					textbox = {
						visible = "[NotEqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
						autoresize = yes
						text = "GOODS_NUMBER_WITH_TRADE_LEVEL"
						align = nobaseline
						parentanchor = hcenter|vcenter
						margin_left = 20
					}

					textbox = {
						visible = "[EqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
						autoresize = yes
						text = "INACTIVE"
						align = nobaseline
						parentanchor = hcenter|vcenter
						margin_left = 20
					}
				}

				icon = {
					size = { 50 50 }
					parentanchor = left|vcenter
					visible = "[TradeRoute.IsConsideredImportForMarket( Market.Self )]"
					texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
				}

				icon = {
					size = { 50 50 }
					parentanchor = left|vcenter
					visible = "[Not(TradeRoute.IsConsideredImportForMarket( Market.Self ))]"
					texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
				}
			}

			small_flag = {
				datacontext = "[TradeRoute.GetOtherMarket(Market.Self).GetOwner]"
			}

			textbox = {
				margin_left = 10
				size = { 70 50 }
				align = left|nobaseline
				text = "@convoys! #v [TradeRoute.GetNumUsedConvoys]#!"
				elide = right
				fontsize_min = 12
				tooltip = "[TradeRoute.GetNumUsedConvoysDesc]"
			}

			textbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				align = left|nobaseline
				text = "@money! #v [TradeRoute.CalcProductivity|1=+]#!"
				tooltip = "[TradeRoute.GetRevenueAfterTariffDesc]"
			}
		}
	}


	type trade_route_button = widget {
		minimumsize = { @panel_width_minus_10 56 }
		
		background = {
			using = entry_bg_simple
			margin = { 0 -3 }
		}

		using = goods_list_item
		block "goods_list_item_datacontext" {
			datacontext = "[TradeRoute.GetGoods]"
		}
		
		# flags + button
		widget = {
			size = { 300 100% }
			position = { 75 0 }
			parentanchor = vcenter
			
			small_flag = {
				parentanchor = vcenter
				block "left_flag" {}
			}
			
			button = {
				size = { 180 40 }
				parentanchor = center
				using = clean_button
				using = select_button_sound
				tooltip = "TRADE_ROUTE_TOOLTIP"
				onclick = "[InformationPanelBar.OpenMarketPanel( TradeRoute.GetOtherMarket(Market.Self) )]"
				onrightclick = "[RightClickMenuManager.ShowForTradeRoute(TradeRoute.AccessSelf)]"								

				onmousehierarchyenter = "[AccessHighlightManager.HighlightTradeRouteSupplyNetwork( TradeRoute.Self )]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				
				icon = {
					block "arrow_texture" {}	
					size = { 50 50 }
					parentanchor = vcenter
					position = { 12 0 }
				}
				
				textbox = {
					visible = "[NotEqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
					autoresize = yes
					text = "[TradeRoute.GetTradeQuantitySignedFor(Market.Self)|=dv]"
					align = nobaseline
					parentanchor = right|vcenter
					margin_right = 18
				}

				textbox = {
					visible = "[EqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
					autoresize = yes
					text = "TRADE_ROUTE_ZERO_TRADES"
					align = nobaseline
					parentanchor = right|vcenter
					margin_right = 18
				}
			}

			small_flag = {
				parentanchor = right|vcenter
				block "right_flag" {}
			}
		}

		### trade route level
		widget = {
			position = { -5 0 }
			parentanchor = vcenter|right
			size = { 130 40 }

			block "interactable_background" {
				background = {
					using = entry_bg_simple
				}
			}
			
			textbox = {
				parentanchor = center
				autoresize = yes
				text = "[TradeRoute.GetLevel|v]"
				align = hcenter|nobaseline
				using = fontsize_large
			}
		}
	}
	
	type trade_route_button_building = widget {
		minimumsize = { @panel_width_minus_10 56 }
		
		background = {
			using = entry_bg_simple
			margin = { 0 -3 }
		}

		using = goods_list_item
		block "goods_list_item_datacontext" {
			datacontext = "[TradeRoute.GetGoods]"
		}
		
		# flags + button
		widget = {
			size = { 300 100% }
			position = { 75 0 }
			parentanchor = vcenter
			
			small_flag = {
				parentanchor = vcenter
				block "left_flag" {}
			}
			
			button = {
				size = { 180 40 }
				parentanchor = center
				using = clean_button
				using = select_button_sound
				tooltip = "TRADE_ROUTE_TOOLTIP"
				onclick = "[InformationPanelBar.OpenMarketPanel( TradeRoute.GetOtherMarket(Building.GetState.GetMarket) )]"

				onmousehierarchyenter = "[AccessHighlightManager.HighlightTradeRouteSupplyNetwork( TradeRoute.Self )]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				
				icon = {
					block "arrow_texture" {}	
					size = { 50 50 }
					parentanchor = vcenter
					position = { 12 0 }
				}
				
				textbox = {
					visible = "[NotEqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
					autoresize = yes
					text = "[TradeRoute.GetTradeQuantitySignedFor(Building.GetState.GetMarket)|=dv]"
					align = nobaseline
					parentanchor = right|vcenter
					margin_right = 18
				}

				textbox = {
					visible = "[EqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
					autoresize = yes
					text = "TRADE_ROUTE_ZERO_TRADES"
					align = nobaseline
					parentanchor = right|vcenter
					margin_right = 18
				}
			}

			small_flag = {
				parentanchor = right|vcenter
				block "right_flag" {}
			}
		}

		### trade route level
		widget = {
			position = { -5 0 }
			parentanchor = vcenter|right
			size = { 130 40 }

			block "interactable_background" {
				background = {
					using = entry_bg_simple
				}
			}
			
			textbox = {
				parentanchor = center
				autoresize = yes
				text = "[TradeRoute.GetLevel|v]"
				align = hcenter|nobaseline
				using = fontsize_large
			}
		}
	}	

	type trade_route_button_small = button {
		using = default_button
		using = select_button_sound
		tooltip = "TRADE_ROUTE_TOOLTIP"
		onclick = "[InformationPanelBar.OpenMarketPanelTab( TradeRoute.GetOtherMarket(Market.Self), 'trade_routes' )]"
		parentanchor = hcenter

		flowcontainer = {
			resizeparent = yes
			margin_right = 5
			parentanchor = hcenter

			icon = {
				datacontext = "[TradeRoute.GetGoods]"
				parentanchor = vcenter
				texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
				size = { 40 40 }
				color = "[Goods.GetCategoryColor]"
				
				tooltipwidget = {
					FancyTooltip_Goods = {}
				}
				
				icon = {
					texture = "[Goods.GetTexture]"
					size = { 30 30 }
					parentanchor = center
				}
			}

			widget = { size = { 2 2 }}

			icon = {
				size = { 25 25 }
				parentanchor = left|vcenter
				visible = "[TradeRoute.IsConsideredImportForMarket( Market.Self )]"
				texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
			}

			icon = {
				size = { 25 25 }
				parentanchor = left|vcenter
				visible = "[Not(TradeRoute.IsConsideredImportForMarket( Market.Self ))]"
				texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
			}

			widget = { size = { 2 2 }}
			
			# flags and arrow+number
			flowcontainer = {
				parentanchor = vcenter
				ignoreinvisible = yes

				textbox = {
					visible = "[NotEqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
					autoresize = yes
					text = "[Negate_CFixedPoint(TradeRoute.GetTradeQuantitySignedFor(Market.Self))|=dv]"
					align = hcenter|nobaseline
					parentanchor = vcenter
					margin_left = 5
					margin_right = 10
				}

				textbox = {
					visible = "[EqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
					autoresize = yes
					text = "TRADE_ROUTE_ZERO_TRADES"
					align = nobaseline
					parentanchor = vcenter
				}
			}
		}
	}

	### POSSIBLE TRADE ROUTES
	type possible_trade_routes = flowcontainer {
		parentanchor = hcenter
		spacing = 5
		margin = { 0 8 }
		direction = vertical
		
		background = {
			using = entry_bg
		}
		
		### SUGGESTIONS IMPORT
		section_header_button = {
			size = { @panel_width_minus_10 38 }
			
			blockoverride "left_text" {
				text = "IMPORT_SUGGESTIONS_TITLE"
			}
			
			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('suggest_import_trade_routes')]"
			}
			
			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('suggest_import_trade_routes'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('suggest_import_trade_routes')]"
			}
		}
		suggest_trade_goods = {}

		### SUGGESTIONS EXPORT
		section_header_button = {
			size = { @panel_width_minus_10 38 }
			
			blockoverride "left_text" {
				text = "EXPORT_SUGGESTIONS_TITLE"
			}
			
			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('suggest_export_trade_routes')]"
			}
			
			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('suggest_export_trade_routes'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('suggest_export_trade_routes')]"
			}
		}
		suggest_trade_goods = {
			blockoverride "visible" {
				visible = "[GetVariableSystem.Exists('suggest_export_trade_routes')]"
			}
			blockoverride "empty_state_visibility" {
				visible = "[IsDataModelEmpty(Market.AccessGoodsSuggestedForExport)]"
			}
			blockoverride "goods_visibility" {
				visible = "[Not(IsDataModelEmpty(Market.AccessGoodsSuggestedForExport))]"
			}
			blockoverride "empty_state_text" {
				text = "NO_GOODS_EXPORT_SUGGESTION"
			}
			blockoverride "datamodel" {
				datamodel = "[Market.AccessGoodsSuggestedForExport]"
			}
			blockoverride "button_functions" {
				enabled = "[Goods.CanEstablishExportTradeRoute]"
				onclick = "[Goods.EstablishExportTradeRoute]"
			}
		}
	}
	
	### SUGGEST TRADE GOODS
	type suggest_trade_goods = flowcontainer {
		direction = vertical
		margin = { 0 5 }
		parentanchor = hcenter
		
		block "visible" {
			visible = "[GetVariableSystem.Exists('suggest_import_trade_routes')]"
		}

		empty_state = {
			blockoverride "visible" {
				block "empty_state_visibility" {
					visible = "[IsDataModelEmpty(Market.AccessGoodsSuggestedForImport)]"
				}
			}
			blockoverride "text" {
				block "empty_state_text" {
					text = "NO_GOODS_IMPORT_SUGGESTION"
				}
			}
		}
		
		fixedgridbox = {
			name = buttons
			parentanchor = hcenter
			block "goods_visibility" {
				visible = "[Not(IsDataModelEmpty(Market.AccessGoodsSuggestedForImport))]"
			}
			block "datamodel" {
				datamodel = "[Market.AccessGoodsSuggestedForImport]"
			}
			maxhorizontalslots = 6
			addrow = 70
			addcolumn = 80
			flipdirection = yes
			
			item = {
				widget = {
					size = { 80 70 }
					
					button_icon_square_map_interaction = {
						parentanchor = center
						size = { 70 70 }
						block "button_functions" {
							onclick = "[Goods.EstablishImportTradeRoute]"
						}

						tooltipwidget = {
							FancyTooltip_Goods = {}
						}

						blockoverride "icon" {
							texture = "[Goods.GetTexture]"
						}
						blockoverride "icon_size" {
							size = { 80% 80% }
						}
					}
				}
			}
		}
	}

	type shipping_lane_information = flowcontainer {
		block "visible" {
			visible = "[Not(IsDataModelEmpty( Country.AccessShippingLanes ))]"
		}
		parentanchor = hcenter
		direction = vertical
		margin_left = 10
		minimumsize = { @panel_width -1 }
		maximumsize = { @panel_width -1 }

		flowcontainer = {
			block "datamodel" {
				datamodel = "[Country.AccessShippingLanes]"
			}

			spacing = 10
			direction = vertical
			parentanchor = hcenter

			item = {
				shipping_lane_item = { }
			}
		}
	}

	type shipping_lane_item = flowcontainer {
		background = {
			using = entry_bg
		}
		margin_top = 10
		margin_bottom = 10
		spacing = 2
		parentanchor = hcenter
		direction = vertical
		onmousehierarchyenter = "[AccessHighlightManager.HighlightShippingLane(ShippingLane.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no
		minimumsize = { @panel_width -1 }
		maximumsize = { @panel_width -1 }

		textbox = {
			margin_left = 10
			autoresize = yes
			align = left|nobaseline
			text = "[ShippingLane.GetCountry.GetFlagTextIcon] [ShippingLane.GetTypeDescription]"
		}

		textbox = {
			margin_left = 10
			autoresize = yes
			align = left|nobaseline
			text = "SHIPPING_LANE_STATE_BEGIN_END"
		}

		flowcontainer = {
			margin_left = 10
			direction = horizontal
			spacing = 10

			textbox = {
				autoresize = yes
				align = left|nobaseline
				text = "[ShippingLane.GetConvoyCostFormatted]"
			}

			textbox = {
				autoresize = yes
				align = left|nobaseline
				text = "[ShippingLane.GetEffectivenessFormatted]"
			}
		}
	}

	type supply_network_information = flowcontainer {
		direction = vertical
		alwaystransparent = no

		default_header = {
			parentanchor = hcenter
			blockoverride "text"
			{
				text = "SUPPLY_NETWORK_HEADER"
			}
		}
		
		widget = { size = { 1 5 }}

		flowcontainer = {
			visible = "[GreaterThan_int32(Country.GetSupplyNetworkNumSeaNodes, '(int32)0')]"
			parentanchor = top|left
			widgetanchor = top|left
			direction = vertical
			margin_left = 10
			minimumsize = { @panel_width -1 }
			maximumsize = { @panel_width -1 }
			onmousehierarchyenter = "[AccessHighlightManager.HighlightSupplyNetwork(Country.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
			alwaystransparent = no

			textbox = {
				autoresize = yes
				text = "NUM_CONVOYS_NO_DAMAGE"
				tooltip = "NUM_CONVOYS_TOOLTIP"
				visible = "[Not(Country.HasDamagedConvoys)]"
			}

			textbox = {
				autoresize = yes
				text = "NUM_CONVOYS_DAMAGE"
				tooltip = "NUM_CONVOYS_TOOLTIP"
				visible = "[Country.HasDamagedConvoys]"
			}

			textbox = {
				autoresize = yes
				text = "USED_CONVOYS"
				tooltip = "USED_CONVOYS_TOOLTIP"
			}

			textbox = {
				autoresize = yes
				text = "NUM_SEA_NODES"
				tooltip = "NUM_SEA_NODES_TOOLTIP"
			}

			textbox = {
				autoresize = yes
				text = "SUPPLY_NETWORK_STRENGTH"
				tooltip = "SUPPLY_NETWORK_STRENGTH_TOOLTIP"
			}
		}
					
		flowcontainer = {
			using = default_list_position
			visible = "[Not(GreaterThan_int32(Country.GetSupplyNetworkNumSeaNodes, '(int32)0'))]"
			direction = vertical
			spacing = 40

			textbox = {
				margin_top = 40
				using = default_list_position
				text = "SUPPLY_NETWORK_EMPTY_STATE"
				autoresize = yes
				align = nobaseline
			}

			divider_decorative = {}
		}
	}

	type supply_network_information_small = widget {
		onmousehierarchyenter = "[AccessHighlightManager.HighlightSupplyNetwork(Country.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no
		size = { 410 110 }
	
		using = entry_bg_fancy_solid_bg

		vbox = {
			margin = { 20 20 }
			
			hbox = {
				tooltip = "SUPPLY_NETWORK_STRENGTH_TOOLTIP"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "SUPPLY_NETWORK_STRENGTH_TEXT"
					align = left|nobaseline
				}	
				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "SUPPLY_NETWORK_STRENGTH_VALUE"
					align = right|nobaseline
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				tooltip = "NUM_SEA_NODES_TOOLTIP"

				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "NUM_SEA_NODES_TEXT"
					align = left|nobaseline
				}
				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "NUM_SEA_NODES_VALUE"
					align = right|nobaseline
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				tooltip = "NUM_CONVOYS_TOOLTIP_EXTENDED"
				
				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "USED_AVAILABE_CONVOYS_TEXT"
					align = left|nobaseline
				}
				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "USED_AVAILABE_CONVOYS_VALUE"
					align = right|nobaseline
				}
			}
		
		}
	}
}
